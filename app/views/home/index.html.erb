
<div id="main">
	

	<!-- Intro -->
	<section id="top" class="one dark cover">
		<div class="container">
			<header>
				<h2 class="alt">Erlang ODBC Tips</h2>
				<h3>A collection of helpful hints for developers using Erlang and ODBC.</h3>
				<p>Using Erlang's ODBC (Open Database Connectivity) support to access a SQL database can be an exercise in frustration, but this guide will get you started in no time.</p>
			</header>			
			<footer>
				<a href="#quickstart" class="button scrolly">Let's get started!</a>
			</footer>
		</div>
	</section>
		
	<!-- Quickstart -->
	<section id="quickstart" class="two">
		<div class="container">	
			<header>
				<h2>First Things First</h2>
			</header>
			<p class="alert alert-info">
				<span class="icon fa-graduation-cap"></span>
				While this guide <em>should</em> be accessible to everyone, we assume you have some practice building Erlang OTP applicaions. We won't spend time explaining syntax and basic concepts. If you come across something you don't recognize, checkout the excellect <a href="http://learnyousomeerlang.com/">Learn You Some Erlang</a> online book.
			</p>				
			<p>If you work with Erlang long enough, you'll find yourself needing to connect to a SQL database because you have to interact with a legacy system or have some data that demands strong consistency.					
			</p>
			<p>To achieve this, you'll need to use ODBC. Erlang ships with native ODBC support as part of the standard OTP libraries, so it's available in every installation without any extra effort.
			</p>
			<h3>Where  To Get Help</h3>
			<p>
				If you're using Erlang ODBC for the first time, you're <em>going</em> to need some extra help at some point (hopefully that's why you're here!). Here are some good resources to check out if you get into a pickle.
			</p>
			<ul>
				<li>
					The official Erlang ODBC <a href="http://www.erlang.org/doc/apps/odbc/getting_started.html">getting started guide</a>.
				</li>
				<li>
					Details of the ODBC <a href="http://www.erlang.org/doc/man/odbc.html">API</a>.
				</li>
				<li>
					The official Erlang ODBC <a href="http://www.erlang.org/doc/apps/odbc/odbc.pdf">reference manual</a> (as PDF).
				</li>
			</ul>
			<h3>Preparing To Connect</h3>
			<p>An ODBC connection requires a DSN (Data Source Name) to be configured on the system. Unfortunately, Erlang ODBC does not support file DSNs, so the DSN must be configured using the Windows ODBC configuration utilities.				
			</p>
			<p>Stata has published an excellent tutorial <a href="http://www.stata.com/support/faqs/data-management/configuring-odbc-win/"> explaining how to set up a Windows Data Source Name</a>. Be sure to follow the instructions for your version of Windows. Also, an ODBC DSN can be either a User DSN or a System DSN. A User DSN is only available to the user who created it, while a System DSN is available to all users of the local system.					
			</p>
			<p class="alert alert-danger">
				<span class="icon fa-warning"></span> 
				Don't forget to configure a DSN on each environment to which you plan to deploy your compiled Erlang release! The lack of support for file DSNs means you cannot distribute the DSN configuration as part of an Erlang release package. Sadly, you'll need to perform this step manually for each machine on which you wish to run your application.
			</p>
			<footer>
				<a href="#connecting" class="button scrolly">It's time to connect!</a>
			</footer>
		</div>
	</section>

	<!-- Connecting -->
	<section id="connecting" class="three">
		<div class="container">
			<header>
				<h2>Connecting</h2>
			</header>
			<p>
				The first steps to using ODBC in Erlang are to declare a dependency on the ODBC OTP application and make sure the application is started. If you use a build system like <a href="https://github.com/basho/rebar">Rebar</a> you'll need to declare a dependency on <code>odbc</code> in the applications list inside your <code>reltool.config</code> file:
			</p>
			<pre class="brush: erlang">
			...
			{rel, "MyApp", "1.0.0",
			    [kernel,
			     stdlib,
			     odbc]
			},
		    ...
		    </pre>
		    <p>If you're using a bootstrap script for development, or are manually starting the applications you need, simply add a line to start the <code>odbc</code> application to your initialization routine:
		    <pre class="brush: erlang">
		    -module(myapp_bootstrap).
			-export([start/0]).

			start() ->
				odbc:start(),	
			    application:load(myapp),
			    application:start(myapp).
		    </pre>
		    <p>A final alternative is to use a command line argument when starting the shell:</p>
		    <pre class="brush: erlang;">
		    erl -s odbc start
		    </pre> 

		    <p class="alert alert-info">
				<span class="icon fa-cogs"></span>
				You can ensure that the <code>odbc</code> OTP application is running by typing <code>application:which_applications().</code> into the Erlang shell and looking for a line like <code>{odbc,"Erlang ODBC application","2.10.18"}</code>.
			</p>

		    <p>At this point, you should have a working environment with all the dependencies that you need to connect to a SQL database using Erlang ODBC. The last step to get up and running is to gather your connection details into a connection string and attempt a simple SQL query.</p>
		    <p>The connection string requires three pieces of information: the name of the DSN that you configured earlier, the SQL login name, and the SQL password. Normally, we'd store this information in the application configuration file, but for this guide we'll declare it as a string variable for simplicity:
		    </p>
		    <pre class="brush: erlang">
		    	ConnectionString = "DSN=MyAppDSN;UID=me;PWD=secret"
		    </pre>
		    <p>The name of the DSN, in this case <code>MyAppDSN</code> must exactly match the name of the DSN that you created in the Windows ODBC tool. Of course the user name and password must be legitimate credentials for your SQL instance.
		    </p>
		    <p>With the connection string ready, let's write a function to test our database connection with the simple query <code>SELECT 1;</code>:
		    </p>
		    <pre class="brush: erlang">
		    -module(myapp_sql_repo).
		    -export([test_connection/0]).

		    %%%==========================================
			%%% Client API
			%%%==========================================
			test_connection() ->
				Sql = "SELECT 1;",
				Connection = connect(),
			    case odbc:sql_query(Connection, Sql) of
			        {selected, Columns, Results} ->
			          io:format("Success!~n Columns: ~p~n Results: ~p~n", 
			          	[Columns, Results]),
			          ok;
			        {error, Reason} ->
			            {error, Reason}                           
			    end. 

		    %%%==========================================
			%%% Internal functions
			%%%==========================================
			connect() ->
			    ConnectionString = "DSN=MyAppDSN;UID=me;PWD=secret",    
			    {ok, Conn} = odbc:connect(ConnectionString, []),
			    Conn.
		    </pre>
		    <p>We now have everything we need to test our ODBC connection on the SQL database. Let's give it a try:
		    </p>
		    <pre class="brush: bash">		    	
				$>erl -s odbc start
				Eshell V5.10  (abort with ^G)
				1> myapp_sql_repo:test_connection().
				Success!
				 Columns: [[]]
				 Results: [{1}]
				ok
		    </pre>
		    <p>If something has gone wrong with SQL itself, you should see an <code>{error, Reason}</code> tuple with a relevant error message. Another common problem may occur if something is wrong with your connection string, preventing your program from establishing an ODBC connection. In that case, you'll see a message similar to:		    	
		    </p>
		    <pre class="brush: bash">		    	
				$>erl -s odbc start
				Eshell V5.10  (abort with ^G)
				1> myapp_sql_repo:test_connection().				
				** exception error: no match of right hand side value {error,
				                                                       "[Microsoft][ODBC Driver
				Manager] Data source name not found and no default driver specified SQLSTATE IS:
				 IM002 Connection to database failed."}
				     in function  myapp_sql_repo:connect/0 (myapp_sql_repo.erl, line 33)
				     in call from myapp_sql_repo:test_connection/0 (myapp_sql_repo.erl, line 9)
				4>
		    </pre>
		    <p>The message clearly indicates that my DSN name (in the connection string) is incorrect.<p>
		</div>
	</section>

	<!--
	IDEAS FOR GOTCHAS:

	- The 64-bit/32-bit problem
	- NOCOUNT messing up pattern matching
	- Buffer overflow/string truncation
	- Unicode character encoding
	- Wonky support for NVARCHAR(MAX)
	- Sequentializing calls anti-pattern (floods mailbox due to IO time)

	-->

</div>
